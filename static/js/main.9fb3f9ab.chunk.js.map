{"version":3,"sources":["Components/Header/index.jsx","Assets/world-map.jpg","Assets/loading.gif","Components/Pages/MainPage/index.jsx","Components/Helper/helper.js","Components/Pages/SityPage/index.jsx","Components/API/api.js","Reducers/MainReduser.js","Components/Pages/MainPage/ContainerMainPage/index.jsx","Components/UsePosition/UsePositionHook.js","Reducers/OtherCitysReduser.js","Components/Pages/SityPage/ContainerCityPage/index.jsx","Components/Pages/MainPage/GridContainer/index.jsx","Components/Body/index.jsx","App.js","reportWebVitals.js","Store/Store.js","index.js"],"names":["AppHeader","props","className","as","align","MainPage","cityName","otherDays","currentCity","someSityOfOurCountry","style","backgroundImage","wordMap","src","loading","alt","Grid","Row","map","item","Column","mobile","tablet","computer","to","link","name","id","getWeekDay","date","getDay","getTime","toLocaleTimeString","findeIcon","weather","find","icon","SityPage","currentCitysDays","Date","dt","toLocaleDateString","weekDay","width","Math","round","temp","day","wind_speed","Button","Icon","getData","apiKey","axios","get","then","response","data","latitude","longitude","InitialState","currentCitysOhterDays","mainReducer","state","action","type","city","daily","filter","setCurrentCityCreator","connect","getWeatherByCoordinate","dispatch","getState","a","current","console","error","useState","position","setPosition","setError","onChange","pos","crd","coords","onError","err","code","message","useEffect","geo","navigator","geolocation","watcher","getCurrentPosition","clearWatch","usePositionHook","setCurrentsCity","citysName","apiKeys","setCurrentsCities","compose","citysData","getWeatherByCityName","coord","lat","lon","withRouter","match","history","params","marginTop","GridContainer","tem","description","feelsLile","feels_like","sunrise","sunset","humidity","memo","Body","exact","path","component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","RootReducers","combineReducers","otherCityReducer","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","document","getElementById"],"mappings":"wOAiBeA,EAZC,SAACC,GAGb,OACI,qBAAKC,UAAU,SAAf,SAEI,cAAC,IAAD,CAAQA,UAAU,gBAAgBC,GAAG,KAAKC,MAAQ,SAAlD,mCCXG,G,aAAA,IAA0B,uC,iBCA1B,MAA0B,oCC8C1BC,EArCA,SAAC,GAAyD,IAAxDC,EAAuD,EAAvDA,SAASC,EAA8C,EAA9CA,UAAUC,EAAoC,EAApCA,YAAYC,EAAwB,EAAxBA,qBAC5C,OACI,sBAAKP,UAAU,WAAf,UACI,qBAAKQ,MAAO,CAACC,gBAAiB,OAAUC,EAAU,KAAMV,UAAU,oBAAlE,SACKM,EAEI,cAAC,EAAD,CAAeF,SAAUA,EAAUC,UAAWA,EAAWC,YAAaA,IAEvE,qBAAKN,UAAU,oBAAoBW,IAAKC,EAASC,IAAI,cAI7D,sBAAKb,UAAU,mBAAf,UACI,cAAC,IAAD,CAAQA,UAAU,0BAA0BE,MAAM,SAASD,GAAG,KAA9D,6CACA,cAACa,EAAA,EAAD,CAAMd,UAAU,iBAAhB,SACI,cAACc,EAAA,EAAKC,IAAN,UACKR,GAAwBA,EAAqBS,KAAI,SAAAC,GAAI,OAAG,cAACH,EAAA,EAAKI,OAAN,CACrDC,OAAQ,EACRC,OAAU,EACVC,SAAY,EACZrB,UAAU,sBAJ2C,SAMrD,cAAC,IAAD,CAAMsB,GAAE,gBAAWL,EAAKM,MAAxB,SACI,+BAAON,EAAKO,UAFXP,EAAKQ,cAQ1B,qBAAKzB,UAAU,oBAAf,SACI,oaCvCL0B,G,OAAa,SAACC,GAGrB,MAFW,CAAC,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,gBAEpCA,EAAKC,YAGVC,EAAQ,SAACF,GAChB,OAAOA,EAAKG,sBAILC,EAAY,SAACd,GAEpB,OADaA,EAAKe,QAAQC,MAAK,SAAAhB,GAAI,OAAIA,EAAKiB,QAAvCA,M,iBCmEMC,EAtEA,SAAC,GAA+B,IAA9B/B,EAA6B,EAA7BA,SAASgC,EAAoB,EAApBA,iBAIlBT,EAAO,IAAIU,KAA6B,IAAxBD,EAAiB,GAAGE,IAAUC,qBAC9CC,EAAUd,EAAW,IAAIW,KAA6B,IAAxBD,EAAiB,GAAGE,KAEtD,OACI,qCACA,qBAAKtC,UAAU,WAAf,SACI,qBAAKA,UAAU,oBAAf,SACI,eAACc,EAAA,EAAD,WACI,cAACA,EAAA,EAAKI,OAAN,CAAahB,MAAO,SAASuC,MAAO,GAAIzC,UAAU,2BAAlD,SACI,qCAAQI,EAAR,SAEJ,cAACU,EAAA,EAAKC,IAAN,UACI,cAACD,EAAA,EAAKI,OAAN,CAAcuB,MAAS,GAAIzC,UAAU,wBAArC,SACI,yCAAUwC,EAAV,YAAqBb,SAG7B,cAACb,EAAA,EAAKC,IAAN,CAAUf,UAAU,wBAApB,SAEKoC,GAAoBA,EAAiBpB,KAAI,SAAAC,GAC1C,OACI,cAACH,EAAA,EAAKI,OAAN,CAA8BE,OAAU,EAAGD,OAAU,EAAGE,SAAU,EAAGnB,MAAQ,SAA7E,SACI,sBAAKF,UAAU,wBAAf,UACI,+BAAO0B,EAAW,IAAIW,KAAc,IAATpB,EAAKqB,OAChC,qBAAKtC,UAAU,sBAAf,SACI,qBAAKW,IAAG,sCAAiCoB,EAAUd,GAA3C,WAA2DJ,IAAI,WAE3E,sBAAMb,UAAU,yBAAhB,SAA0C0C,KAAKC,MAAM1B,EAAK2B,KAAKC,IAAM,WANxD5B,EAAKqB,SAalC,cAACxB,EAAA,EAAKC,IAAN,CAAUf,UAAU,0BAApB,SACI,cAACc,EAAA,EAAKI,OAAN,CAAauB,MAAS,GAAKvC,MAAQ,SAAnC,SACI,gIAGR,cAACY,EAAA,EAAKC,IAAN,CAAUf,UAAW,yBAArB,SAEIoC,GAAoBA,EAAiBpB,KAAI,SAAAC,GACrC,OAEI,eAACH,EAAA,EAAKI,OAAN,CAA6BlB,UAAW,gCAAgCoB,OAAU,EAAGD,OAAU,EAAGE,SAAU,EAAInB,MAAQ,SAAxH,UACI,sBAAMF,UAAW,yBAAjB,SAA4C0B,EAAW,IAAIW,KAAc,IAATpB,EAAKqB,OACrE,sBAAMtC,UAAU,sBAAhB,SAAuC0C,KAAKC,MAAM1B,EAAK6B,gBAFvC7B,EAAKqB,gBAW7C,cAAC,IAAD,CAAMhB,GAAI,IAAV,SACI,eAACyB,EAAA,EAAD,CAAQ/C,UAAY,mBAApB,UACI,cAACgD,EAAA,EAAD,CAAMxB,KAAO,eADjB,kE,kECjELyB,EAAU,SACI7C,EAAS8C,GAC3B,OAAOC,IAAMC,IAAN,4DAA+DhD,EAA/D,kBAAiF8C,IACnFG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAH3BN,EAAU,SAKQO,EAASC,EAAUP,GACxC,OAAOC,IAAMC,IAAN,8DAAiEI,EAAjE,gBAAiFC,EAAjF,kBAAoGP,IACtGG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAP5BN,EAAU,SASOO,EAASC,EAAUP,GACvC,OAAOC,IAAMC,IAAN,8DAAiEI,EAAjE,gBAAiFC,EAAjF,kDAAoIP,IACtIG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCZjCjD,EAAc,mBAEhBoD,EAAe,CAEXtD,SAAU,GACV8C,OAAQ,mCACRvB,MAAM,IAAIU,MAAOE,qBACjBjC,YAAa,KACbqD,sBAAuB,GACvBpD,qBAAsB,CAClB,CACIiB,KAAM,6CACND,KAAM,YACNE,GAAI,GAER,CACID,KAAM,2BACND,KAAM,OACNE,GAAI,GAER,CACID,KAAM,6CACND,KAAM,UACNE,GAAI,GAER,CACID,KAAM,uCACND,KAAM,QACNE,GAAI,GAER,CACID,KAAM,wFACND,KAAM,kBACNE,GAAI,GAER,CACID,KAAM,mDACND,KAAM,YACNE,GAAI,GAER,CACID,KAAM,0GACND,KAAM,sBACNE,GAAI,GAER,CACID,KAAM,6CACND,KAAM,UACNE,GAAI,GAER,CACID,KAAM,uCACND,KAAM,UACNE,GAAI,GAER,CACID,KAAM,uCACND,KAAM,QACNE,GAAI,IAER,CACID,KAAM,mDACND,KAAM,WACNE,GAAI,IAER,CACID,KAAM,uCACND,KAAM,UACNE,GAAI,IAER,CACID,KAAM,0DACND,KAAM,aACNE,GAAI,IAER,CACID,KAAM,iCACND,KAAM,OACNE,GAAI,IAER,CACID,KAAM,yDACND,KAAM,eACNE,GAAI,IAIR,CACID,KAAM,iCACND,KAAM,SACNE,GAAI,MAuBLmC,EAdG,WAAiC,IAAhCC,EAA+B,uDAAvBH,EAAcI,EAAS,uCAC9C,OAAOA,EAAOC,MACV,KAAKzD,EACD,OAAO,2BACAuD,GADP,IAEIzD,SAAU0D,EAAO1D,SACjBE,YA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","file":"static/js/main.9fb3f9ab.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.scss'\r\nimport {Header} from \"semantic-ui-react\"\r\n\r\n\r\nlet AppHeader = (props)=>{\r\n\r\n\r\n    return(\r\n        <div className='header'>\r\n\r\n            <Header className=\"header__title\" as='h2' align = 'center'>Weather at Home :)</Header>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppHeader;","export default __webpack_public_path__ + \"static/media/world-map.1433676d.jpg\";","export default __webpack_public_path__ + \"static/media/loading.149a7823.gif\";","import React from 'react';\r\nimport './MainPage.scss';\r\nimport wordMap from '../../../Assets/world-map.jpg'\r\nimport {Header,Grid} from \"semantic-ui-react\";\r\nimport {GridContainer} from \"../index\";\r\nimport {Link} from \"react-router-dom\";\r\nimport loading from '../../../Assets/loading.gif'\r\n\r\n\r\nlet MainPage = ({cityName,otherDays,currentCity,someSityOfOurCountry})=>{\r\n    return(\r\n        <div className='mainpage'>\r\n            <div style={{backgroundImage: 'url(' +  wordMap + ')'}} className='mainpage__weather'>\r\n                {currentCity\r\n                    ?\r\n                     <GridContainer cityName={cityName} otherDays={otherDays} currentCity={currentCity}/>\r\n                    :\r\n                    <img className='sitypage__loading' src={loading} alt=\"loading\"/>\r\n                }\r\n            </div>\r\n\r\n            <div className='mainpage__sities'>\r\n                <Header className='mainpage__sities-header' align='center' as='h6'> Most popular Cities of Country</Header>\r\n                <Grid className='mainpage__grid'>\r\n                    <Grid.Row >\r\n                        {someSityOfOurCountry && someSityOfOurCountry.map(item=> <Grid.Column\r\n                            mobile={6}\r\n                            tablet = {4}\r\n                            computer = {4}\r\n                            className='mainpage__grid-city'\r\n                            key={item.id}>\r\n                            <Link to={`/city/${item.link}`}>\r\n                                <span>{item.name}</span>\r\n                            </Link>\r\n                        </Grid.Column>)}\r\n                    </Grid.Row>\r\n                </Grid>\r\n            </div>\r\n            <div className='mainpage__warning'>\r\n                <p> Если приложение работает не корректно проверте подключение к геоданным</p>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainPage ;","export let getWeekDay = (date) => {\r\n    let days = ['ВС', 'ПН', 'ВТ', 'СР', 'ЧТ', 'ПТ', 'СБ'];\r\n\r\n    return days[date.getDay()];\r\n}\r\n\r\nexport let getTime=(date)=>{\r\n    return date.toLocaleTimeString()\r\n}\r\n\r\n\r\nexport let findeIcon = (item)=>{\r\n    let {icon} = item.weather.find(item => item.icon)\r\n    return icon;\r\n}\r\n","import React from 'react';\r\nimport './SityPage.scss'\r\nimport {Grid,} from \"semantic-ui-react\";\r\nimport {findeIcon, getWeekDay} from \"../../Helper/helper\";\r\nimport {Button,Icon} from \"semantic-ui-react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\n\r\nlet SityPage = ({cityName,currentCitysDays})=>{\r\n\r\n\r\n\r\n    let date = new Date(currentCitysDays[0].dt *1000).toLocaleDateString();\r\n    let weekDay = getWeekDay(new Date(currentCitysDays[0].dt *1000));\r\n\r\n    return(\r\n        <>\r\n        <div className='sitypage'>\r\n            <div className='sitypage__content'>\r\n                <Grid  >\r\n                    <Grid.Column align ='center' width={16} className='sitypage__content-header'>\r\n                        <span> {cityName} </span>\r\n                    </Grid.Column>\r\n                    <Grid.Row>\r\n                        <Grid.Column  width = {16} className='sitypage__content-day'>\r\n                            <span>{`${weekDay} ${date}`}</span>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row className='sitypage__content-row'>\r\n\r\n                        {currentCitysDays && currentCitysDays.map(item=> {\r\n                        return(\r\n                            <Grid.Column  key = {item.dt} tablet = {2} mobile = {4} computer={2} align = 'center'>\r\n                                <div className='mainpage__bord-clouds'>\r\n                                    <span>{getWeekDay(new Date(item.dt *1000))}</span>\r\n                                    <div className='mainpage__bord-icon'>\r\n                                        <img src={`//openweathermap.org/img/wn/${findeIcon(item)}@2x.png`} alt=\"icon\"/>\r\n                                    </div>\r\n                                    <span className='mainpage__bord-degrees'>{Math.round(item.temp.day - 273)}</span>\r\n                                </div>\r\n                            </Grid.Column >\r\n                        )}\r\n                        )}\r\n\r\n                    </Grid.Row>\r\n                    <Grid.Row className='sitypage__content-speed'>\r\n                        <Grid.Column width = {16}  align = 'center'>\r\n                            <span>Скорость ветра м/c</span>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row className= 'sitypage__content-wind'  >\r\n                    {\r\n                        currentCitysDays && currentCitysDays.map(item=> {\r\n                            return(\r\n\r\n                                <Grid.Column key = {item.dt} className= 'sitypage__content-wind-column' tablet = {2} mobile = {4} computer={2}  align = 'center'>\r\n                                    <span className= 'sitypage__content-time' >{getWeekDay(new Date(item.dt *1000))}</span>\r\n                                    <span className='mainpage__bord-wind'>{Math.round(item.wind_speed)}</span>\r\n                                </Grid.Column>\r\n                                )})\r\n                    }\r\n                    </Grid.Row>\r\n\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n            <Link to={'/'}>\r\n                <Button className = 'sitypage__button' >\r\n                    <Icon name = 'arrow left'/>\r\n                    Вернуться\r\n                </Button>\r\n\r\n            </Link>\r\n\r\n            </>\r\n    )\r\n}\r\n\r\nexport default SityPage;","import axios from 'axios'\r\n\r\n\r\nexport let getData = {\r\n    getWeatherByCityName(cityName,apiKey){\r\n       return axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${apiKey}`)\r\n           .then(response => response.data)\r\n    },\r\n    getCityNameByCoordinates(latitude,longitude,apiKey){\r\n        return axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${apiKey}`)\r\n            .then(response => response.data)\r\n    },\r\n    getWeatherByCoordinates(latitude,longitude,apiKey){\r\n        return axios.get(`https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&lang=ru&exclude=hourly,minutely&appid=${apiKey}`)\r\n            .then(response => response.data)\r\n    }\r\n}\r\n\r\n","\r\nimport {getData} from \"../Components/API/api\";\r\nconst currentCity = \"SET_CURRENT_CITY\";\r\n\r\nlet InitialState = {\r\n\r\n        cityName: '',\r\n        apiKey: 'db775b25dcce0743bac3b9c39ee3610f',\r\n        date: new Date().toLocaleDateString(),\r\n        currentCity: null,\r\n        currentCitysOhterDays: [],\r\n        someSityOfOurCountry: [\r\n            {\r\n                name: 'Винница',\r\n                link: 'Vinnytsia',\r\n                id: 1\r\n            },\r\n            {\r\n                name: 'Киев',\r\n                link: 'Kyiv',\r\n                id: 2\r\n            },\r\n            {\r\n                name: 'Харьков',\r\n                link: 'Kharkiv',\r\n                id: 3\r\n            },\r\n            {\r\n                name: 'Одесса',\r\n                link: 'Odesa',\r\n                id: 4\r\n            },\r\n            {\r\n                name: 'Ивано-Франковск',\r\n                link: 'Ivano-Frankivsk',\r\n                id: 5\r\n            },\r\n            {\r\n                name: 'Чернигов',\r\n                link: 'Chernihiv',\r\n                id: 6\r\n            },\r\n            {\r\n                name: 'Каменец-Подольский',\r\n                link: 'Kamianets-Podilskyi',\r\n                id: 7\r\n            },\r\n            {\r\n                name: 'Полтава',\r\n                link: 'Poltava',\r\n                id: 8\r\n            },\r\n            {\r\n                name: 'Херсон',\r\n                link: 'Kherson',\r\n                id: 9\r\n            },\r\n            {\r\n                name: 'Одесса',\r\n                link: 'Odesa',\r\n                id: 10\r\n            },\r\n            {\r\n                name: 'Николаев',\r\n                link: 'Mykolaiv',\r\n                id: 11\r\n            },\r\n            {\r\n                name: 'Донецк',\r\n                link: 'Donetsk',\r\n                id: 12\r\n            },\r\n            {\r\n                name: 'Кривой Рог',\r\n                link: 'Kryvyi Rih',\r\n                id: 13\r\n            },\r\n            {\r\n                name: 'Львов',\r\n                link: 'Lviv',\r\n                id: 14\r\n            },\r\n            {\r\n                name: 'Запорожье',\r\n                link: 'Zaporizhzhia',\r\n                id: 15\r\n            },\r\n\r\n\r\n            {\r\n                name: 'Днепр',\r\n                link: 'Dnipro',\r\n                id: 16\r\n            },\r\n\r\n        ],\r\n\r\n\r\n\r\n}\r\n\r\nlet mainReducer = (state = InitialState, action)=>{\r\n    switch(action.type){\r\n        case currentCity:\r\n            return {\r\n                ...state,\r\n                cityName: action.cityName,\r\n                currentCity: {...action.city},\r\n                currentCitysOhterDays: action.daily.filter(item => new Date(item.dt *1000).toLocaleDateString() !== state.date)\r\n\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default mainReducer;\r\n\r\n\r\nlet setCurrentCityCreator  = (city,cityName,daily) => ({type:currentCity ,city, cityName,daily});\r\n\r\nexport let getWeatherByCoordinate = (latitude,longitude) => async (dispatch,getState)=>{\r\n\r\n     let apiKey = getState().data.apiKey;\r\n    try{\r\n        let {name} = await getData.getCityNameByCoordinates(latitude,longitude,apiKey);\r\n        let {current,daily} = await  getData.getWeatherByCoordinates(latitude,longitude,apiKey);\r\n        dispatch(setCurrentCityCreator(current,name,daily))\r\n    }catch (e) {\r\n        console.error(e)\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React,{useEffect} from 'react';\r\nimport {usePositionHook} from \"../../../UsePosition/UsePositionHook\";\r\nimport {connect} from \"react-redux\";\r\nimport {MainPage} from \"../../index\";\r\nimport {getWeatherByCoordinate} from \"../../../../Reducers/MainReduser\";\r\n\r\nlet ContainerMainPage = ({cityName,currentCity,otherDays,getWeatherByCoordinate,someSityOfOurCountry})=>{\r\n\r\n    let {latitude,longitude} = usePositionHook()\r\n\r\n    useEffect(()=>{\r\n        if(latitude && longitude){\r\n            getWeatherByCoordinate(latitude,longitude)\r\n        }\r\n    },[getWeatherByCoordinate,latitude,longitude])\r\n\r\n\r\n    return(\r\n        <MainPage cityName={cityName}\r\n                  otherDays={otherDays}\r\n                  currentCity={currentCity}\r\n                  someSityOfOurCountry={someSityOfOurCountry}\r\n        />\r\n    )\r\n}\r\n\r\nlet mapStateToProps =(state)=>{\r\n\r\n    return{\r\n        cityName: state.data.cityName,\r\n        currentCity: state.data.currentCity,\r\n        otherDays: state.data.currentCitysOhterDays,\r\n        someSityOfOurCountry: state.data.someSityOfOurCountry,\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,{getWeatherByCoordinate})(ContainerMainPage)\r\n","\r\nimport { useState, useEffect } from 'react';\r\n\r\nexport const usePositionHook = () => {\r\n    const [position, setPosition] = useState({});\r\n    const [error, setError] = useState(null);\r\n\r\n    const onChange = (pos) => {\r\n        let crd = pos.coords;\r\n        setPosition({latitude:crd.latitude,longitude:crd.longitude});\r\n    };\r\n\r\n    const onError = (err) => {\r\n        setError(`ERROR(${err.code}): ${err.message}`);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const geo = navigator.geolocation;\r\n\r\n        if (!geo) {\r\n            setError('Геолокация не поддерживается браузером');\r\n            return;\r\n        }\r\n\r\n       let watcher = geo.getCurrentPosition(onChange, onError);\r\n\r\n        return () => geo.clearWatch(watcher);\r\n    }, []);\r\n\r\n    return {...position, error};\r\n}","\r\nimport {getData} from \"../Components/API/api\";\r\nconst setCurrentsCity = \"SET_CURRENTS_CITY\";\r\n\r\nlet InitialState = {\r\n\r\n    citysName: '',\r\n    apiKeys: 'db775b25dcce0743bac3b9c39ee3610f',\r\n    currentCitysDays: null\r\n\r\n\r\n}\r\n\r\nlet mainReducer = (state = InitialState, action)=>{\r\n    switch(action.type){\r\n        case setCurrentsCity:\r\n            return {\r\n                ...state,\r\n                citysName: action.cityName,\r\n                currentCitysDays: action.daily\r\n            }\r\n        default: return state\r\n    }\r\n}\r\nexport default mainReducer;\r\n\r\n\r\nlet setCurrentsCities  = (cityName,daily) => ({type:setCurrentsCity, cityName,daily});\r\n\r\nexport let getWeatherByCityName = (cityName) => async (dispatch,getState)=>{\r\n    let apiKey = getState().citysData.apiKeys\r\n    try {\r\n        let date = await getData.getWeatherByCityName(cityName,apiKey)\r\n        let {lat,lon} = date.coord;\r\n        let data = await  getData.getWeatherByCoordinates(lat,lon,apiKey);\r\n        dispatch(setCurrentsCities(cityName,data.daily))\r\n    }catch (e) {\r\n        console.error(e)\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React,{useEffect} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {CityPage} from \"../../index\";\r\nimport {getWeatherByCityName} from \"../../../../Reducers/OtherCitysReduser\";\r\nimport {withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\nimport loading from '../../../../Assets/loading.gif'\r\n\r\n\r\nlet ContainerCityPage = ({getWeatherByCityName,cityName,currentCitysDays,match,history})=>{\r\n\r\n\r\n    let city = match.params.id;\r\n\r\n\r\n    useEffect(()=>{\r\n            if(city){getWeatherByCityName(city)}\r\n    },[getWeatherByCityName,city])\r\n\r\n    return(\r\n        <>\r\n        {currentCitysDays\r\n            ?\r\n            <CityPage cityName={cityName} currentCitysDays={currentCitysDays} />\r\n            :\r\n            <div className='sitypage' style={{marginTop:'10px'}}><img className='sitypage__loading' src={loading} alt=\"loading\"/></div>}\r\n        </>\r\n    )\r\n}\r\n\r\nlet mapStateToProps =(state)=>{\r\n    return{\r\n        cityName: state.citysData.citysName,\r\n        currentCitysDays: state.citysData.currentCitysDays\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n\r\n        connect(mapStateToProps,{getWeatherByCityName}),\r\n        withRouter,\r\n        )(ContainerCityPage)","import React,{memo} from 'react';\r\nimport '../MainPage.scss';\r\nimport {Grid} from \"semantic-ui-react\";\r\nimport {getWeekDay,getTime,findeIcon } from \"../../../Helper/helper\";\r\n\r\n\r\nlet GridContainer = ({cityName,otherDays,currentCity})=>{\r\n\r\n\r\n\r\n        let date = new Date(currentCity.dt *1000).toLocaleDateString();\r\n        let weekDay = getWeekDay(new Date(currentCity.dt *1000));\r\n        let tem = Math.round(currentCity.temp - 273);\r\n        let {description} =   currentCity.weather[0];\r\n        let feelsLile = Math.round(currentCity.feels_like - 273);\r\n        let sunrise = getTime(new Date(currentCity.sunrise *1000));\r\n        let sunset = getTime(new Date(currentCity.sunset *1000));\r\n        let icon = findeIcon(currentCity)\r\n\r\n\r\n    return(\r\n        <div className='mainpage__weather-content'>\r\n                    <Grid>\r\n                        <Grid.Row>\r\n                            <Grid.Column  width={16} className='mainpage__weather-header'>\r\n                                <span>{cityName}</span>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                        <Grid.Row style={{marginTop: '20px'}}>\r\n                            <Grid.Column mobile={16} tablet={6} computer={6} className='mainpage__weather-description'>\r\n                                <Grid.Column width={16} className='mainpage__weather-date'>\r\n                                    <span>{weekDay}</span>\r\n                                    <span> {date} </span>\r\n                                </Grid.Column>\r\n                                <Grid.Column width={16} className='mainpage__weather-img'>\r\n                                    <div className='mainpage__weather-degrees'>\r\n                                        <span className='mainpage__weather-tem'>\r\n                                            {tem }\r\n                                            <span className= 'mainpage__weather-deg'>&deg;</span>\r\n                                        </span>\r\n                                    </div>\r\n                                    <span>{description}</span>\r\n                                    <div className='mainpage__weather-icon'><img src={`//openweathermap.org/img/wn/${icon}@2x.png`}  alt=\"icon\"/></div>\r\n                                </Grid.Column>\r\n                                <Grid.Column width={16} className='mainpage__weather-text'>\r\n                                    <span>По ощущению</span> <span className='mainpage__weather-number'> <span>{feelsLile}</span></span>\r\n                                </Grid.Column>\r\n                                <Grid.Column width={16} className='mainpage__weather-text'>\r\n                                    <span>Ветер</span> <span className='mainpage__weather-number'> <span>{currentCity.wind_speed}</span> м/c</span>\r\n                                </Grid.Column>\r\n                                <Grid.Column width={16} className='mainpage__weather-text'>\r\n                                    <span>Влажность</span> <span className='mainpage__weather-number'> <span>{currentCity.humidity}%</span></span>\r\n                                </Grid.Column>\r\n                                <Grid.Column width={16} className='mainpage__weather-text'>\r\n                                    <span>Рассвет</span> <span\r\n                                    className='mainpage__weather-number'> {sunrise} </span>\r\n                                </Grid.Column>\r\n                                <Grid.Column width={16} className='mainpage__weather-text'>\r\n                                    <span>Закат</span> <span\r\n                                    className='mainpage__weather-number'> {sunset} </span>\r\n                                </Grid.Column>\r\n                            </Grid.Column>\r\n                            <Grid.Column mobile={16} tablet={10} computer={10} className='mainpage__weather-bord'>\r\n                                 <Grid >\r\n                                     {\r\n                                         otherDays && otherDays.map(item=> {\r\n\r\n                                      return(\r\n                                             <Grid.Column align='center' mobile={3} tablet={2} computer={2} key = {item.dt}>\r\n                                             <div className='mainpage__bord-clouds'>\r\n                                                 <span>{getWeekDay(new Date(item.dt *1000))}</span>\r\n                                                 <div className='mainpage__bord-icon'>\r\n                                                     <img src={`//openweathermap.org/img/wn/${findeIcon(item)}@2x.png`} alt=\"icon\"/>\r\n                                                 </div>\r\n                                                 <span className='mainpage__bord-degrees'>{Math.round(item.temp.day - 273)}</span>\r\n                                             </div>\r\n                                         </Grid.Column> )})\r\n                                     }\r\n\r\n                                    <Grid.Row className='mainpage__bord-second'>\r\n                                        <Grid.Column width={16} align='center'>\r\n                                            <span>Скорость ветра м/c</span>\r\n                                        </Grid.Column>\r\n                                    </Grid.Row>\r\n                                    <Grid.Row className='mainpage__bord-third'>\r\n                                        {\r\n                                            otherDays && otherDays.map(item=> {\r\n                                                return(\r\n                                                    <Grid.Column key = {item.dt} mobile={3} tablet={2} computer={2} align='center'>\r\n                                                        <span className='mainpage__bord-day'>{getWeekDay(new Date(item.dt *1000))}</span>\r\n                                                        <span className='mainpage__bord-wind'>{Math.round(item.wind_speed)}</span>\r\n                                                    </Grid.Column> )})\r\n                                        }\r\n\r\n                                    </Grid.Row>\r\n                                 </Grid>\r\n\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                    </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(GridContainer );","import React from 'react';\r\nimport './Body.scss';\r\nimport {ContainerCityPage,ContainerMainPage } from \"../Pages\";\r\nimport {Route,Switch} from 'react-router-dom';\r\n\r\n\r\nlet Body = (props)=>{\r\n\r\n    return(\r\n        <div className='body'>\r\n            <Switch>\r\n                <Route exact path='/' component = {()=> <ContainerMainPage/>}/>\r\n                <Route exact path='/city/:id' component = {()=> <ContainerCityPage/>}/>\r\n                <Route component={()=> <div className='body__notFound'>404 The page not found</div>} />\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Body ;\r\n\r\n","import React from 'react';\nimport {Header,Body} from \"./Components\";\nimport './Styles/index.scss'\n\nlet App = ()=> {\n  return (\n    <div className=\"app\">\n        <Header/>\n        <Body/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore,applyMiddleware} from 'redux';\r\nimport mainReducer from '../Reducers/MainReduser';\r\nimport otherCityReducer from '../Reducers/OtherCitysReduser';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nlet RootReducers = combineReducers({\r\n    data: mainReducer,\r\n    citysData: otherCityReducer\r\n})\r\n\r\nlet store = createStore(RootReducers,applyMiddleware(thunkMiddleware));\r\nexport default store;\r\n\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Styles/index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from 'react-router-dom';\nimport {Provider} from \"react-redux\";\nimport store from './Store/Store';\n\n\nReactDOM.render(\n      <Provider store={store}>\n          <HashRouter  >\n              <App />\n          </HashRouter  >\n      </Provider>,\n\n\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}